<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlterTableAddColumn" xml:space="preserve">
    <value>ALTER TABLE {schemaName}.{tableName} ADD {columnDefinition}</value>
  </data>
  <data name="AlterTableAlterColumn" xml:space="preserve">
    <value>ALTER TABLE {schemaName}.{tableName} ALTER COLUMN {columnDefinition}</value>
  </data>
  <data name="And" xml:space="preserve">
    <value>AND</value>
  </data>
  <data name="Asc" xml:space="preserve">
    <value>ASC</value>
  </data>
  <data name="ColumnDefinition" xml:space="preserve">
    <value>{columnName} {sqlType} NOT NULL</value>
  </data>
  <data name="CreateSchemaIfNotExists" xml:space="preserve">
    <value>CREATE SCHEMA IF NOT EXISTS "{schemaName}"</value>
  </data>
  <data name="CreateTable" xml:space="preserve">
    <value>CREATE TABLE {schemaName}.{tableName}
( 
{tableDefinition}
)</value>
  </data>
  <data name="DbTypeBinary" xml:space="preserve">
    <value>BYTEA</value>
  </data>
  <data name="DbTypeBoolean" xml:space="preserve">
    <value>BIT</value>
  </data>
  <data name="DbTypeDate" xml:space="preserve">
    <value>DATE</value>
  </data>
  <data name="DbTypeDateTime" xml:space="preserve">
    <value>TIMESTAMP(3)</value>
  </data>
  <data name="DbTypeDateTimeOffset" xml:space="preserve">
    <value>TIMESTAMPTZ(3)</value>
  </data>
  <data name="DbTypeDecimal" xml:space="preserve">
    <value>NUMERIC</value>
  </data>
  <data name="DbTypeDouble" xml:space="preserve">
    <value>DOUBLE PRECISION</value>
  </data>
  <data name="DbTypeGuid" xml:space="preserve">
    <value>UUID</value>
  </data>
  <data name="DbTypeInt16" xml:space="preserve">
    <value>SMALLINT</value>
  </data>
  <data name="DbTypeInt32" xml:space="preserve">
    <value>INTEGER</value>
  </data>
  <data name="DbTypeInt64" xml:space="preserve">
    <value>BIGINT</value>
  </data>
  <data name="DbTypeSingle" xml:space="preserve">
    <value>REAL</value>
  </data>
  <data name="DbTypeString" xml:space="preserve">
    <value>TEXT</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>DELETE FROM {schemaName}.{tableName} WHERE {filter}</value>
  </data>
  <data name="Desc" xml:space="preserve">
    <value>DESC</value>
  </data>
  <data name="DummyEqualsZero" xml:space="preserve">
    <value>@dummy = 0</value>
  </data>
  <data name="Equal" xml:space="preserve">
    <value>=</value>
  </data>
  <data name="Exists" xml:space="preserve">
    <value>SELECT CASE WHEN EXISTS ((SELECT 1 FROM {schemaName}.{tableName} WHERE {filter})) THEN CAST(1 AS BOOLEAN) ELSE CAST(0 AS BOOLEAN) END</value>
  </data>
  <data name="GetTableColumns" xml:space="preserve">
    <value>SELECT COLUMN_NAME, CASE WHEN UDT_NAME IN ('varchar', 'timestamp', 'timestamptz') THEN UDT_NAME ELSE DATA_TYPE END AS DATA_TYPE, COALESCE(CHARACTER_MAXIMUM_LENGTH, DATETIME_PRECISION) AS LENGTH_OR_PRECISION
FROM INFORMATION_SCHEMA.COLUMNS
WHERE Lower(TABLE_SCHEMA) = Lower('{schemaName}')
AND Lower(TABLE_NAME) = Lower('{tableName}')</value>
  </data>
  <data name="GreaterThan" xml:space="preserve">
    <value>&gt;</value>
  </data>
  <data name="GreaterThanOrEqual" xml:space="preserve">
    <value>&gt;=</value>
  </data>
  <data name="IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} SERIAL NOT NULL</value>
  </data>
  <data name="In" xml:space="preserve">
    <value>IN</value>
  </data>
  <data name="Insert" xml:space="preserve">
    <value>INSERT INTO {schemaName}.{tableName} ({columns}) VALUES ({values})</value>
  </data>
  <data name="InsertOutput" xml:space="preserve">
    <value>INSERT INTO {schemaName}.{tableName} ({columns}) VALUES ({values}) RETURNING {outputColumns}</value>
  </data>
  <data name="InsertWhereNotExists" xml:space="preserve">
    <value>INSERT INTO {schemaName}.{tableName} ({columns}) 
SELECT {values}
WHERE NOT EXISTS ( SELECT 1 FROM {schemaName}.{tableName} WHERE {filter} )</value>
  </data>
  <data name="Int16IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} SMALLSERIAL NOT NULL</value>
  </data>
  <data name="Int32IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} SERIAL NOT NULL</value>
  </data>
  <data name="Int64IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} BIGSERIAL NOT NULL</value>
  </data>
  <data name="Is" xml:space="preserve">
    <value>IS</value>
  </data>
  <data name="IsNot" xml:space="preserve">
    <value>IS NOT</value>
  </data>
  <data name="LessThan" xml:space="preserve">
    <value>&lt;</value>
  </data>
  <data name="LessThanOrEqual" xml:space="preserve">
    <value>&lt;=</value>
  </data>
  <data name="Like" xml:space="preserve">
    <value>LIKE</value>
  </data>
  <data name="MaxLength" xml:space="preserve">
    <value>10485760</value>
  </data>
  <data name="Merge" xml:space="preserve">
    <value>INSERT INTO {schemaName}.{tableName} ({allColumns}) VALUES ({allValues})
ON CONFLICT ({keyColumns}) DO UPDATE SET {columnValues}</value>
  </data>
  <data name="MergeIncrement" xml:space="preserve">
    <value>INSERT INTO {schemaName}.{tableName} ({columns}) VALUES ({values})
ON CONFLICT ({keyColumns}) DO UPDATE SET {incrementColumnName} = {schemaName}.{tableName}.{incrementColumnName} + {increment}
RETURNING {incrementColumnName}</value>
  </data>
  <data name="Not" xml:space="preserve">
    <value>NOT</value>
  </data>
  <data name="NotEqual" xml:space="preserve">
    <value>&lt;&gt;</value>
  </data>
  <data name="Null" xml:space="preserve">
    <value>NULL</value>
  </data>
  <data name="NullableColumnDefinition" xml:space="preserve">
    <value>{columnName} {sqlType} NULL</value>
  </data>
  <data name="On" xml:space="preserve">
    <value>ON {condition}</value>
  </data>
  <data name="OneEqualsOne" xml:space="preserve">
    <value>1 = 1</value>
  </data>
  <data name="OneEqualsZero" xml:space="preserve">
    <value>1 = 0</value>
  </data>
  <data name="Or" xml:space="preserve">
    <value>OR</value>
  </data>
  <data name="PrimaryKeyConstraintDefinition" xml:space="preserve">
    <value>CONSTRAINT PK_{tableName} PRIMARY KEY ({columns})</value>
  </data>
  <data name="QueryEquals" xml:space="preserve">
    <value>{column} = {value}</value>
  </data>
  <data name="QueryGreatherThen" xml:space="preserve">
    <value>{column} &gt; {value}</value>
  </data>
  <data name="QueryLessThen" xml:space="preserve">
    <value>{column} &lt; {value}</value>
  </data>
  <data name="QueryIsNotNull" xml:space="preserve">
    <value>{column} IS NOT NULL</value>
  </data>
  <data name="ReservedKeywords" xml:space="preserve">
    <value>ABS
ABSOLUTE
ACTION
ADD
ALL
ALLOCATE
ALTER
ANALYSE
ANALYZE
AND
ANY
ARE
ARRAY
ARRAY_AGG
ARRAY_MAX_CARDINALITY
AS
ASC
ASENSITIVE
ASSERTION
ASYMMETRIC
AT
ATOMIC
AUTHORIZATION
AVG
BEGIN
BEGIN_FRAME
BEGIN_PARTITION
BETWEEN
BIGINT
BINARY
BIT
BIT_LENGTH
BLOB
BOOLEAN
BOTH
BY
CALL
CALLED
CARDINALITY
CASCADE
CASCADED
CASE
CAST
CATALOG
CEIL
CEILING
CHAR
CHARACTER
CHARACTER_LENGTH
CHAR_LENGTH
CHECK
CLOB
CLOSE
COALESCE
COLLATE
COLLATION
COLLECT
COLUMN
COMMIT
CONDITION
CONNECT
CONNECTION
CONSTRAINT
CONSTRAINTS
CONTAINS
CONTINUE
CONVERT
CORR
CORRESPONDING
COUNT
COVAR_POP
COVAR_SAMP
CREATE
CROSS
CUBE
CUME_DIST
CURRENT
CURRENT_CATALOG
CURRENT_DATE
CURRENT_DEFAULT_TRANSFORM_GROUP
CURRENT_PATH
CURRENT_ROLE
CURRENT_ROW
CURRENT_SCHEMA
CURRENT_TIME
CURRENT_TIMESTAMP
CURRENT_TRANSFORM_GROUP_FOR_TYPE
CURRENT_USER
CURSOR
CYCLE
DATALINK
DATE
DAY
DEALLOCATE
DEC
DECIMAL
DECLARE
DEFAULT
DEFERRABLE
DEFERRED
DELETE
DENSE_RANK
DEREF
DESC
DESCRIBE
DESCRIPTOR
DETERMINISTIC
DIAGNOSTICS
DISCONNECT
DISTINCT
DLNEWCOPY
DLPREVIOUSCOPY
DLURLCOMPLETE
DLURLCOMPLETEONLY
DLURLCOMPLETEWRITE
DLURLPATH
DLURLPATHONLY
DLURLPATHWRITE
DLURLSCHEME
DLURLSERVER
DLVALUE
DO
DOMAIN
DOUBLE
DROP
DYNAMIC
EACH
ELEMENT
ELSE
END
END-EXEC
END_FRAME
END_PARTITION
EQUALS
ESCAPE
EVERY
EXCEPT
EXCEPTION
EXEC
EXECUTE
EXISTS
EXP
EXTERNAL
EXTRACT
FALSE
FETCH
FILTER
FIRST
FIRST_VALUE
FLOAT
FLOOR
FOR
FOREIGN
FOUND
FRAME_ROW
FREE
FROM
FULL
FUNCTION
FUSION
GET
GLOBAL
GO
GOTO
GRANT
GROUP
GROUPING
GROUPS
HAVING
HOLD
HOUR
IDENTITY
IMMEDIATE
IMPORT
IN
INDICATOR
INITIALLY
INNER
INOUT
INPUT
INSENSITIVE
INSERT
INT
INTEGER
INTERSECT
INTERSECTION
INTERVAL
INTO
IS
ISOLATION
JOIN
KEY
LAG
LANGUAGE
LARGE
LAST
LAST_VALUE
LATERAL
LEAD
LEADING
LEFT
LEVEL
LIKE
LIKE_REGEX
LIMIT
LN
LOCAL
LOCALTIME
LOCALTIMESTAMP
LOWER
MATCH
MAX
MAX_CARDINALITY
MEMBER
MERGE
METHOD
MIN
MINUTE
MOD
MODIFIES
MODULE
MONTH
MULTISET
NAMES
NATIONAL
NATURAL
NCHAR
NCLOB
NEW
NEXT
NO
NONE
NORMALIZE
NOT
NTH_VALUE
NTILE
NULL
NULLIF
NUMERIC
OCCURRENCES_REGEX
OCTET_LENGTH
OF
OFFSET
OLD
ON
ONLY
OPEN
OPTION
OR
ORDER
OUT
OUTER
OUTPUT
OVER
OVERLAPS
OVERLAY
OWNER
PAD
PARAMETER
PARTIAL
PARTITION
PERCENT
PERCENTILE_CONT
PERCENTILE_DISC
PERCENT_RANK
PERIOD
PLACING
PORTION
POSITION
POSITION_REGEX
POWER
PRECEDES
PRECISION
PREPARE
PRESERVE
PRIMARY
PRIOR
PRIVILEGES
PROCEDURE
PUBLIC
RANGE
RANK
READ
READS
REAL
RECURSIVE
REF
REFERENCES
REFERENCING
REGR_AVGX
REGR_AVGY
REGR_COUNT
REGR_INTERCEPT
REGR_R2
REGR_SLOPE
REGR_SXX
REGR_SXY
REGR_SYY
RELATIVE
RELEASE
RESTRICT
RESULT
RETURN
RETURNING
RETURNS
REVOKE
RIGHT
ROLLBACK
ROLLUP
ROW
ROWS
ROW_NUMBER
SAVEPOINT
SCHEMA
SCOPE
SCROLL
SEARCH
SECOND
SECTION
SELECT
SENSITIVE
SESSION
SESSION_USER
SET
SIMILAR
SIZE
SMALLINT
SOME
SPACE
SPECIFIC
SPECIFICTYPE
SQL
SQLCODE
SQLERROR
SQLEXCEPTION
SQLSTATE
SQLWARNING
SQRT
START
STATIC
STDDEV_POP
STDDEV_SAMP
SUBMULTISET
SUBSTRING
SUBSTRING_REGEX
SUCCEEDS
SUM
SYMMETRIC
SYSTEM
SYSTEM_TIME
SYSTEM_USER
TABLE
TABLESAMPLE
TEMPORARY
THEN
TIME
TIMESTAMP
TIMEZONE_HOUR
TIMEZONE_MINUTE
TO
TRAILING
TRANSACTION
TRANSLATE
TRANSLATE_REGEX
TRANSLATION
TREAT
TRIGGER
TRIM
TRIM_ARRAY
TRUE
TRUNCATE
UESCAPE
UNION
UNIQUE
UNKNOWN
UNNEST
UPDATE
UPPER
USAGE
USER
USING
VALUE
VALUES
VALUE_OF
VARBINARY
VARCHAR
VARIADIC
VARYING
VAR_POP
VAR_SAMP
VERSIONING
VIEW
WHEN
WHENEVER
WHERE
WIDTH_BUCKET
WINDOW
WITH
WITHIN
WITHOUT
WORK
WRITE
XML
XMLAGG
XMLATTRIBUTES
XMLBINARY
XMLCAST
XMLCOMMENT
XMLCONCAT
XMLDOCUMENT
XMLELEMENT
XMLEXISTS
XMLFOREST
XMLITERATE
XMLNAMESPACES
XMLPARSE
XMLPI
XMLQUERY
XMLSERIALIZE
XMLTABLE
XMLTEXT
XMLVALIDATE
YEAR
ZONE</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>SELECT {columns} FROM {schemaName}.{tableName} WHERE {filter}</value>
  </data>
  <data name="SelectCount" xml:space="preserve">
    <value>SELECT COUNT(*) FROM {schemaName}.{tableName} WHERE {filter}</value>
  </data>
  <data name="SelectCountDistinct" xml:space="preserve">
    <value>SELECT COUNT(*) FROM (SELECT DISTINCT * FROM {schemaName}.{tableName} WHERE {filter}) AS t</value>
  </data>
  <data name="SelectDistinct" xml:space="preserve">
    <value>SELECT {columns} FROM {schemaName}.{tableName} WHERE {filter}</value>
  </data>
  <data name="SelectDistinctSkipTake" xml:space="preserve">
    <value>SELECT DISTINCT {columns} FROM {schemaName}.{tableName} WHERE {filter} ORDER BY {orderBy} LIMIT {take} OFFSET {skip}</value>
  </data>
  <data name="SelectSkipTake" xml:space="preserve">
    <value>SELECT {columns} FROM {schemaName}.{tableName} WHERE {filter} ORDER BY {orderBy} LIMIT {take} OFFSET {skip}</value>
  </data>
  <data name="SelectTop1" xml:space="preserve">
    <value>SELECT {columns} FROM {schemaName}.{tableName} WHERE {filter} LIMIT 1</value>
  </data>
  <data name="TableExists" xml:space="preserve">
    <value>SELECT CASE WHEN EXISTS ((SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE Lower(TABLE_SCHEMA) = Lower('{schemaName}') AND Lower(TABLE_NAME) = Lower('{tableName}'))) THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>UPDATE {schemaName}.{tableName}
SET {columnValues}
WHERE {filter}</value>
  </data>
  <data name="ValueAsColumn" xml:space="preserve">
    <value>{value} AS {column}</value>
  </data>
</root>