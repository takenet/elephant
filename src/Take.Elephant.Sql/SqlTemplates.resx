<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlterTableAddColumn" xml:space="preserve">
    <value>ALTER TABLE {schemaName}.{tableName} ADD {columnDefinition}</value>
  </data>
  <data name="AlterTableAlterColumn" xml:space="preserve">
    <value>ALTER TABLE {schemaName}.{tableName} ALTER COLUMN {columnDefinition}</value>
  </data>
  <data name="And" xml:space="preserve">
    <value>AND</value>
  </data>
  <data name="Asc" xml:space="preserve">
    <value>ASC</value>
  </data>
  <data name="ColumnDefinition" xml:space="preserve">
    <value>{columnName} {sqlType} NOT NULL</value>
  </data>
  <data name="CreateSchemaIfNotExists" xml:space="preserve">
    <value>IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '{schemaName}') EXEC sp_executesql N'CREATE SCHEMA [{schemaName}];';</value>
  </data>
  <data name="CreateTable" xml:space="preserve">
    <value>CREATE TABLE {schemaName}.{tableName}
( 
{tableDefinition}
)</value>
  </data>
  <data name="DbTypeBinary" xml:space="preserve">
    <value>VARBINARY({length})</value>
  </data>
  <data name="DbTypeBoolean" xml:space="preserve">
    <value>BIT</value>
  </data>
  <data name="DbTypeDate" xml:space="preserve">
    <value>DATE</value>
  </data>
  <data name="DbTypeDateTime" xml:space="preserve">
    <value>DATETIMEOFFSET(2)</value>
  </data>
  <data name="DbTypeDateTimeOffset" xml:space="preserve">
    <value>DATETIMEOFFSET(2)</value>
  </data>
  <data name="DbTypeDecimal" xml:space="preserve">
    <value>DECIMAL(9,3)</value>
  </data>
  <data name="DbTypeDouble" xml:space="preserve">
    <value>FLOAT</value>
  </data>
  <data name="DbTypeGuid" xml:space="preserve">
    <value>UNIQUEIDENTIFIER</value>
  </data>
  <data name="DbTypeInt16" xml:space="preserve">
    <value>SMALLINT</value>
  </data>
  <data name="DbTypeInt32" xml:space="preserve">
    <value>INT</value>
  </data>
  <data name="DbTypeInt64" xml:space="preserve">
    <value>BIGINT</value>
  </data>
  <data name="DbTypeSingle" xml:space="preserve">
    <value>REAL</value>
  </data>
  <data name="DbTypeString" xml:space="preserve">
    <value>NVARCHAR({length})</value>
  </data>
  <data name="DbTypeTime" xml:space="preserve">
    <value>TIME({length})</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>DELETE FROM {schemaName}.{tableName} WHERE {filter}</value>
  </data>
  <data name="Desc" xml:space="preserve">
    <value>DESC</value>
  </data>
  <data name="DummyEqualsZero" xml:space="preserve">
    <value>@dummy = 0</value>
  </data>
  <data name="Equal" xml:space="preserve">
    <value>=</value>
  </data>
  <data name="Exists" xml:space="preserve">
    <value>SELECT CAST(CASE WHEN EXISTS ((SELECT 1 FROM {schemaName}.{tableName} WHERE {filter})) THEN '1' ELSE '0' END AS BIT)</value>
  </data>
  <data name="GetTableColumns" xml:space="preserve">
    <value>SELECT COLUMN_NAME, DATA_TYPE, COALESCE(CHARACTER_MAXIMUM_LENGTH, DATETIME_PRECISION) AS LENGTH_OR_PRECISION
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = '{schemaName}'
AND TABLE_NAME = '{tableName}'</value>
  </data>
  <data name="GreaterThan" xml:space="preserve">
    <value>&gt;</value>
  </data>
  <data name="GreaterThanOrEqual" xml:space="preserve">
    <value>&gt;=</value>
  </data>
  <data name="IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} {sqlType} NOT NULL IDENTITY(1,1)</value>
  </data>
  <data name="In" xml:space="preserve">
    <value>IN</value>
  </data>
  <data name="Insert" xml:space="preserve">
    <value>INSERT INTO {schemaName}.{tableName} ({columns}) VALUES ({values})</value>
  </data>
  <data name="InsertOutput" xml:space="preserve">
    <value>INSERT INTO {schemaName}.{tableName} ({columns}) OUTPUT inserted.{outputColumns} VALUES ({values})</value>
  </data>
  <data name="InsertWhereNotExists" xml:space="preserve">
    <value>
      BEGIN TRY
        INSERT INTO {schemaName}.{tableName} ({columns}) 
        SELECT {values}
        WHERE NOT EXISTS ( SELECT 1 FROM {schemaName}.{tableName} WHERE {filter} )
      END TRY
      BEGIN CATCH
        IF ERROR_NUMBER() &lt;&gt; 2627
        THROW
      END CATCH
    </value>
  </data>
  <data name="Int16IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} SMALLINT NOT NULL IDENTITY(1,1)</value>
  </data>
  <data name="Int32IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} INT NOT NULL IDENTITY(1,1)</value>
  </data>
  <data name="Int64IdentityColumnDefinition" xml:space="preserve">
    <value>{columnName} BIGINT NOT NULL IDENTITY(1,1)</value>
  </data>
  <data name="Is" xml:space="preserve">
    <value>IS</value>
  </data>
  <data name="IsNot" xml:space="preserve">
    <value>IS NOT</value>
  </data>
  <data name="LessThan" xml:space="preserve">
    <value>&lt;</value>
  </data>
  <data name="LessThanOrEqual" xml:space="preserve">
    <value>&lt;=</value>
  </data>
  <data name="Like" xml:space="preserve">
    <value>LIKE</value>
  </data>
  <data name="MaxLength" xml:space="preserve">
    <value>MAX</value>
  </data>
  <data name="Merge" xml:space="preserve">
    <value>DECLARE @dummy int;
MERGE {schemaName}.{tableName} AS target
USING (SELECT {columnNamesAndValues}) as source
ON ({on})
WHEN MATCHED THEN
UPDATE SET {columnValues}
WHEN NOT MATCHED THEN
INSERT ({columns}) VALUES ({values});</value>
  </data>
  <data name="MergeIncrement" xml:space="preserve">
    <value>MERGE {schemaName}.{tableName} AS target
USING (SELECT {columnNamesAndValues}) as source
ON ({on})
WHEN MATCHED THEN
UPDATE SET {incrementColumnName} = target.{incrementColumnName} + {increment}
WHEN NOT MATCHED THEN
INSERT ({columns}) VALUES ({values})
OUTPUT inserted.{incrementColumnName};</value>
  </data>
  <data name="Not" xml:space="preserve">
    <value>NOT</value>
  </data>
  <data name="NotEqual" xml:space="preserve">
    <value>&lt;&gt;</value>
  </data>
  <data name="Null" xml:space="preserve">
    <value>NULL</value>
  </data>
  <data name="NullableColumnDefinition" xml:space="preserve">
    <value>{columnName} {sqlType} NULL</value>
  </data>
  <data name="On" xml:space="preserve">
    <value>ON {condition}</value>
  </data>
  <data name="OneEqualsOne" xml:space="preserve">
    <value>1 = 1</value>
  </data>
  <data name="OneEqualsZero" xml:space="preserve">
    <value>1 = 0</value>
  </data>
  <data name="Or" xml:space="preserve">
    <value>OR</value>
  </data>
  <data name="PrimaryKeyConstraintDefinition" xml:space="preserve">
    <value>CONSTRAINT PK_{tableName} PRIMARY KEY CLUSTERED ({columns})</value>
  </data>
  <data name="QueryEquals" xml:space="preserve">
    <value>{column} = {value}</value>
  </data>
  <data name="QueryGreatherThen" xml:space="preserve">
    <value>{column} &gt; {value}</value>
  </data>
  <data name="QueryIsNotNull" xml:space="preserve">
    <value>{column} IS NOT NULL</value>
  </data>
  <data name="QueryLessThen" xml:space="preserve">
    <value>{column} &lt; {value}</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>SELECT {columns} FROM {schemaName}.{tableName} WHERE {filter}</value>
  </data>
  <data name="SelectCount" xml:space="preserve">
    <value>SELECT COUNT(*) FROM {schemaName}.{tableName} WHERE {filter}</value>
  </data>
  <data name="SelectCountDistinct" xml:space="preserve">
    <value>SELECT COUNT(*) FROM (SELECT DISTINCT * FROM {schemaName}.{tableName} WHERE {filter}) AS t</value>
  </data>
  <data name="SelectDistinct" xml:space="preserve">
    <value>SELECT DISTINCT {columns} FROM {schemaName}.{tableName} WHERE {filter}</value>
  </data>
  <data name="SelectDistinctSkipTake" xml:space="preserve">
    <value>SELECT DISTINCT {columns} FROM {schemaName}.{tableName} WHERE {filter} ORDER BY {orderBy} OFFSET {skip} ROWS FETCH NEXT {take} ROWS ONLY</value>
  </data>
  <data name="SelectSkipTake" xml:space="preserve">
    <value>SELECT {columns} FROM {schemaName}.{tableName} WHERE {filter} ORDER BY {orderBy} OFFSET {skip} ROWS FETCH NEXT {take} ROWS ONLY</value>
  </data>
  <data name="SelectTop1" xml:space="preserve">
    <value>SELECT TOP 1 {columns} FROM {schemaName}.{tableName} WHERE {filter}</value>
  </data>
  <data name="TableExists" xml:space="preserve">
    <value>SELECT CASE WHEN EXISTS ((SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '{schemaName}' AND TABLE_NAME = '{tableName}')) THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>UPDATE {schemaName}.{tableName}
SET {columnValues}
WHERE {filter}</value>
  </data>
  <data name="ValueAsColumn" xml:space="preserve">
    <value>{value} AS {column}</value>
  </data>
</root>